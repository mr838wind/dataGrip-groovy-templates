<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<!--
    <%= tableComment %> SQL
-->

<mapper namespace="${ITEMS.MAPPER.packageName}.${className}Mapper">

<%
    def nonPkFields = fields.findAll { !it.isPk }
    def pkFields = fields.findAll { it.isPk }
    def nonPkNoInsertFields = nonPkFields.findAll { !it.isInsertField }
%>

<!--
    <![CDATA[ sample ]]>
    참고: searchCriteria 에서 appType 으로 front,back 구분할수 있음
-->

	<!--/** ====================================    ==================================== */-->
	<!-- search -->
	<sql id="criteria${className}">
        <if test=" bzCd != null and bzCd != '' ">
            AND T.BZ_CD = #{bzCd}
        </if>
	</sql>

	<!-- list -->
	<select id="select${className}List"  parameterType="${fullSearchCriteria}" resultType="${fullDTO}">
	    <include refid="common.pagingStart" />
		SELECT
        <%
          fields.eachWithIndex { it,index ->
                if(index != 0) {
                    out.print("		  ,")
                }

                if(it.isDateType) {
                    def s = String.format( "TO_CHAR(T.%s,'YYYYMMDDHH24MISS') AS %s", it.dbName, it.dbName )
                    out.print( s )
                } else {
                    def s = String.format( "T.%s", it.dbName )
                    out.print( s )
                }
                out.println()
          }
        %>
		FROM ${table.name} T
		WHERE 1=1
		<include refid="criteria${className}" />
	    <choose>
			<when test=" appType == 'FRONT' ">
                ORDER BY
                    <%
                      pkFields.eachWithIndex { it,index ->
                            if(index != 0) {
                                out.print("		  , ")
                            }
                            def s = String.format( " %s ASC ", it.dbName )
                            out.print( s )
                            out.println()
                      }
                    %>
            </when>
			<otherwise>
				ORDER BY
                    <%
                      pkFields.eachWithIndex { it,index ->
                            if(index != 0) {
                                out.print("		  , ")
                            }
                            def s = String.format( " %s ASC ", it.dbName )
                            out.print( s )
                            out.println()
                      }
                    %>
			</otherwise>
		</choose>
		<include refid="common.pagingEnd" />
	</select>

	<!-- list count -->
	<select id="select${className}ListCount"  parameterType="${fullSearchCriteria}" resultType="int">
		SELECT
		COUNT(*)
		FROM ${table.name} T
		WHERE 1=1
		<include refid="criteria${className}" />
	</select>

	<!-- single -->
	<select id="select${className}" parameterType="${fullDTO}" resultType="${fullDTO}" >
		SELECT
        <%
          fields.eachWithIndex { it,index ->
                if(index != 0) {
                    out.print("		  ,")
                }
                if(it.isDateType) {
                    def s = String.format( "TO_CHAR(T.%s,'YYYYMMDDHH24MISS') AS %s", it.dbName, it.dbName )
                    out.print( s )
                } else {
                    def s = String.format( "T.%s", it.dbName )
                    out.print( s )
                }
                out.println()
          }
        %>
		FROM ${table.name} T
		WHERE
            <%
              pkFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  and ")
                    }
                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    out.print( s )
                    out.println()
              }
            %>
	</select>


	<!-- insert -->
	<!--
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			SELECT SQ_${table.name}.NEXTVAL FROM DUAL
		</selectKey>
	-->
	<insert id="insert${className}" parameterType="${fullDTO}">

		INSERT INTO ${table.name} (
            <%
              fields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  ,")
                    }
                    out.print(it.dbName)
                    out.println()
              }
            %>
		) VALUES (
            <%
              fields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  ,")
                    }
                    def s = String.format( " #{ %s } ", it.name )
                    if( it.isDateType ) {
                        if( it.isInsertField || it.isUpdateField ) {
                            s = "SYSDATE"
                        }
                    }
                    out.print( s )
                    out.println()
              }
            %>
		)
	</insert>

	<!-- update -->
	<update id="update${className}" parameterType="${fullDTO}">
		UPDATE ${table.name}
		SET
            <%
              nonPkNoInsertFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  ,")
                    }

                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    if( it.isDateType ) {
                        if( it.isUpdateField ) {
                            s = String.format( " %s = SYSDATE ", it.dbName)
                        }
                    }
                    out.print( s )
                    out.println()
              }
            %>
		WHERE
            <%
              pkFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  and ")
                    }
                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    out.print( s )
                    out.println()
              }
            %>
	</update>

	<!-- delete -->
	<delete id="delete${className}" parameterType="${fullDTO}">
		DELETE FROM ${table.name}
		WHERE
            <%
              pkFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  and ")
                    }

                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    out.print( s )
                    out.println()
              }
            %>
	</delete>


</mapper>
