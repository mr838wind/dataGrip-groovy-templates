package ${ITEMS.SERVICE.packageName};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.apache.commons.collections.CollectionUtils;

import java.util.List;
import java.util.Map;

/**
 * <%= tableComment %> 서비스
 */
@Service
public class ${className}Service {

    @Autowired
    ${className}Mapper mapper;  // <%= tableComment %>

    <%
        if(subTableObjectListExist) {
            subTableObjectList.eachWithIndex { it,index ->
                out.println("@Autowired ")
                out.println(String.format("  %sMapper %sMapper;    // %s ", it.className, it.classNameLower, it.tableComment))
            }
        }
    %>

    /** ====================================  list   ==================================== */

    public int select${className}ListCount(${className}SearchCriteria criteria) {
        return mapper.select${className}ListCount(criteria);
    }

    public List<${className}DTO> select${className}List(${className}SearchCriteria criteria) {
        return mapper.select${className}List(criteria);
    }


    <% if(subTableObjectListExist) { %>
        //== sub
        public List<${className}DTO> select${className}ListWithSub(${className}SearchCriteria criteria) {
            List<${className}DTO> list = select${className}List(criteria);
            if( CollectionUtils.isNotEmpty(list) ) {
                for(${className}DTO dto : list) {
                    selectSubList(dto);
                }
            }
            return list;
        }
    <% } %>



    /** ====================================  detail   ==================================== */

    public ${className}DTO select${className}(${className}DTO dto) {
        return mapper.select${className}(dto);
    }

    <% if(subTableObjectListExist) { %>
        //== sub
        public ${className}DTO select${className}WithSub(${className}DTO dto) {
            ${className}DTO info = select${className}(dto);
            if(info != null) {
                selectSubList(info);
            }
            return info;
        }
    <% } %>


    <%
        /////// common  ///////
        //== a,b,c...
        def selectParamArray = []
        //== String a, Integer b...
        def selectParamAndTypeArray = []
        //== dto.getBzCd(), dto.getSamId() ...
        def selectParamDtoArray = []

        pkFields.eachWithIndex { it,index ->
            selectParamArray.add(it.name)
            selectParamAndTypeArray.add(" ${it.dtoTypeStr} ${it.name}")
            selectParamDtoArray.add( String.format( "  dto.get%s() ", it.name.capitalize() ) )
        }
    %>

    // TODO//complete 확인
    public ${className}DTO select${className}ByPk( ${selectParamAndTypeArray.join(',')} ) {
        return mapper.select${className}ByPk( ${selectParamArray.join(",")} );
    }

    <% if(subTableObjectListExist) { %>
        public ${className}DTO select${className}ByPkWithSub( ${selectParamAndTypeArray.join(',')} ) {
            ${className}DTO info = select${className}ByPk( ${selectParamArray.join(",")} );
            if(info != null) {
                selectSubList(info);
            }
            return info;
        }
    <% } %>


    /** ====================================  insert   ==================================== */

    public void insert${className}(${className}DTO dto) {
        mapper.insert${className}(dto);
    }

    <% if(subTableObjectListExist) { %>
        //==
        public void insert${className}WithSub(${className}DTO dto) {
            mapper.insert${className}(dto);
            insertSubList(dto);
        }
    <% } %>



    /** ====================================   update  ==================================== */

    public void update${className}(${className}DTO dto) {
        mapper.update${className}(dto);
    }

    <% if(subTableObjectListExist) { %>
        //== sub
        public void update${className}WithSub(${className}DTO dto) {
            mapper.update${className}(dto);
            deleteSubList(dto);
            insertSubList(dto);
        }
    <% } %>


    /** ====================================   merge  ==================================== */

    public void merge${className}(${className}DTO dto) {
        mapper.merge${className}(dto);
    }

    <% if(subTableObjectListExist) { %>
        // TODO//complete 확인: todo sub obj naming, or move to util
        //== sub
        public void merge${className}WithSub(${className}DTO dto) {
            // 1. select origin dto
            ${className}DTO originDto = select${className}ByPkWithSub( ${selectParamDtoArray.join(',')} );
            // 2. merge master
            mapper.merge${className}(dto);
            // 3. for each sub obj
            <%
                subTableObjectList.eachWithIndex { it,index ->
            %>
                    // naming
                    // 3.1  calculate to del obj
                    List<${it.className}DTO> origin${it.className}SubList = originDto.get${it.className}List();
                    if(originDto != null) {
                        origin${it.className}SubList = originDto.get${it.className}List();
                    }
                    List<${it.className}DTO> new${it.className}SubList = dto.get${it.className}List();
                    if(new${it.className}SubList == null) {
                        new${it.className}SubList = new ArrayList<>();
                    }
                    List<${it.className}DTO> toDel${it.className}SubList = (List<${it.className}DTO>)CollectionUtils.subtract(origin${it.className}SubList, new${it.className}SubList); // be careful with hashcode, equals

                    // 3.2  delete calculated del obj
                    if( ! CollectionUtils.isEmpty(toDel${it.className}SubList) ) {
                        for( ${it.className}DTO subItem : toDel${it.className}SubList ) {
                            ${it.classNameLower}Mapper.delete${it.className}(subItem);
                        }
                    }

                    // 3.3  merge sub
                    if( ! CollectionUtils.isEmpty(newSub${it.className}List) ) {
                        for( ${it.className}DTO subItem : newSub${it.className}List ) {
                            ${it.classNameLower}Mapper.merge${it.className}(subItem);
                        }
                    }
            <%
                }
            %>
        }
    <% } %>


    /** ====================================   delete  ==================================== */


    public void delete${className}(${className}DTO dto) {
        mapper.delete${className}(dto);
    }

    <% if(subTableObjectListExist) { %>
        //== sub
        public void delete${className}WithSub(${className}DTO dto) {
            deleteSubList(dto);
            mapper.delete${className}(dto);
        }
    <% } %>

    public void delete${className}ByPk( ${selectParamAndTypeArray.join(',')} ) {
        mapper.delete${className}ByPk( ${selectParamArray.join(",")} );
    }

    <% if(subTableObjectListExist) { %>
        //== sub
        public void delete${className}ByPkWithSub( ${selectParamAndTypeArray.join(',')} ) {
            deleteSubListByParentPk( ${selectParamArray.join(",")} );
            delete${className}ByPk( ${selectParamArray.join(",")} );
        }
    <% } %>


        // public void delete${className}ByUpdate(${className}DTO dto) {
        //     mapper.delete${className}ByUpdate(dto);
        // }



    /** ====================================  subList   ==================================== */


    <% if(subTableObjectListExist) { %>
        //== TODO//complete 확인

        private void selectSubList(${className}DTO dto) {
            <%
                subTableObjectList.eachWithIndex { it,index ->
                    out.println("")
                    def varName = "search" + it.className
                    out.println(String.format(DEFAULT_BLANK_INDENT + " %sSearchCriteria %s = new %sSearchCriteria(); "
                        , it.className, varName, it.className ))

                    pkFields.eachWithIndex { itPk,indexPk ->
                        out.println(String.format(DEFAULT_BLANK_INDENT + " %s.set%s(dto.get%s()); "
                                                , varName, itPk.name.capitalize(), itPk.name.capitalize() ))
                    }

                    out.println(String.format(DEFAULT_BLANK_INDENT + " dto.set%sList(%sMapper.select%sList(%s)); "
                        , it.className, it.classNameLower, it.className, varName ))
                }

                //== sample code: selectSubList
                // SampleAttachSearchCriteria searchSampleAttach = new SampleAttachSearchCriteria();
                // searchSampleAttach.setSampleId(dto.getSampleId());
                // dto.setSampleAttachList(sampleAttachMapper.selectSampleAttachList(searchSampleAttach));
            %>
        }


        //== TODO//complete 확인
        private void insertSubList(${className}DTO dto) {
            <%
                subTableObjectList.eachWithIndex { it,index ->
                    out.println("")
                    out.println(String.format(DEFAULT_BLANK_INDENT + " if(CollectionUtils.isNotEmpty(dto.get%sList())) { "
                        , it.className ))
                    out.println(String.format(DEFAULT_BLANK_INDENT + "   for (%sDTO aItem : dto.get%sList()) { "
                        , it.className, it.className ))

                    pkFields.eachWithIndex { itPk,indexPk ->
                        out.println(String.format(DEFAULT_BLANK_INDENT + "     aItem.set%s(dto.get%s()); "
                                                , itPk.name.capitalize(), itPk.name.capitalize() ))
                    }

                    out.println(String.format(DEFAULT_BLANK_INDENT + "     %sMapper.insert%s(aItem); "
                        , it.classNameLower, it.className ))
                    out.println(String.format(DEFAULT_BLANK_INDENT + "   } " ))
                    out.println(String.format(DEFAULT_BLANK_INDENT + " } " ))

                }

                //== sample code: insertSubList
                // if(CollectionUtils.isNotEmpty(dto.getSampleAttachList())) {
                //     for (SampleAttachDTO aItem : dto.getSampleAttachList()) {
                //         aItem.setSampleId(dto.getSampleId());
                //         sampleAttachMapper.insertSampleAttach(aItem);
                //     }
                // }
            %>
        }


        //== TODO//complete 처리
        private void deleteSubList(${className}DTO dto) {
            <%
                subTableObjectList.eachWithIndex { it,index ->
                    out.println(String.format("  %sMapper.delete%sByParentPk(%s); "
                        , it.classNameLower, it.className, selectParamDtoArray.join(",") ))

                }

                //== sample code: deleteSubList
                // sampleAttachMapper.deleteSampleAttachByParentPk(dto.getSampleId());
            %>
        }


        private void deleteSubListByParentPk( ${selectParamAndTypeArray.join(",")} ) {
            ${className}DTO dto = new ${className}DTO();
            <%
                pkFields.eachWithIndex {it, index ->
                    out.println(String.format("  dto.set%s(%s); "
                        , it.name.capitalize(), it.name ))
                }
            %>
            deleteSubList(dto);
        }

    <% } %>

}
