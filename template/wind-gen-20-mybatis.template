<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<!--
    <%= tableComment %> SQL
-->

<mapper namespace="${ITEMS.MAPPER.packageName}.${className}Mapper">


<!--
    <![CDATA[ sample ]]>
    참고: searchCriteria 에서 appType 으로 front,back 구분할수 있음
    주의:
        1. seq
        2. 날짜:  TO_CHAR(SYSDATE,'YYYYMMDD')
-->

	<!--/** ====================================    ==================================== */-->
	<!-- search -->
	<sql id="criteria${className}">

	</sql>

	<!-- 참고:
        <if test=" bzCd != null and bzCd != '' ">
            AND T.BZ_CD = #{ bzCd }
        </if>
        <if test=" themeNm != null and themeNm != '' ">
			AND T.THEME_NM like '%' || #{ themeNm } || '%'
		</if>
        <choose>
            <when test=" appType == 'FRONT' ">
                AND T.USE_YN = '1'
            </when>
        </choose>
    -->


    <sql id="columnsForMain">
        <%
          fields.eachWithIndex { it,index ->
                if(index != 0) {
                    out.print("		  ,")
                }

                if(it.isDateType) {
                    def s = String.format( "TO_CHAR(T.%s,'YYYYMMDDHH24MISS') AS %s", it.dbName, it.dbName )
                    out.print( s )
                } else {
                    def s = String.format( "T.%s", it.dbName )
                    out.print( s )
                }
                out.println()
          }
        %>
    </sql>

    <sql id="columnsForOther">

    </sql>

    <!--
	    참고:
	      , (SELECT BZ_NM FROM TLSB_BZ_MST WHERE BZ_CD = T.BZ_CD) AS BZ_NM
		  , (SELECT FILE_PATH FROM TLSM_FILE_MST WHERE FILE_ID = T.PC_LOGO_FILE_ID ) AS PC_LOGO_FILE_ID_PATH
		  , (SELECT ORG_FILE_NM FROM TLSM_FILE_MST WHERE FILE_ID = T.PC_LOGO_FILE_ID ) AS PC_LOGO_FILE_ID_ORG
	-->

	<sql id="tableJoin">
		${table.name} T
	</sql>


	<!-- list -->
	<select id="select${className}List"  parameterType="${fullSearchCriteria}" resultType="${fullDTO}">
	    <include refid="common.pagingStart" />
		SELECT
            <include refid="columnsForMain" />
        	<include refid="columnsForOther" />

		FROM <include refid="tableJoin" />
		WHERE 1=1
		<include refid="criteria${className}" />
	    <choose>
			<when test=" appType == 'FRONT' ">
                ORDER BY
                    IPT_DTM DESC
            </when>
			<otherwise>
				ORDER BY
                    IPT_DTM DESC
			</otherwise>
		</choose>
		<include refid="common.pagingEnd" />
	</select>


	<!-- list count -->
	<select id="select${className}ListCount"  parameterType="${fullSearchCriteria}" resultType="int">
		SELECT
		COUNT(*)
		FROM <include refid="tableJoin" />
		WHERE 1=1
		<include refid="criteria${className}" />
	</select>

	<!-- single -->
	<select id="select${className}" parameterType="${fullDTO}" resultType="${fullDTO}" >
		SELECT
            <include refid="columnsForMain" />
        	<include refid="columnsForOther" />

		FROM <include refid="tableJoin" />
		WHERE
            <%
              pkFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  AND ")
                    }
                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    out.print( s )
                    out.println()
              }
            %>
	</select>

	<!-- single by pk -->
    <select id="select${className}ByPk" resultType="${fullDTO}" >
        SELECT
            <include refid="columnsForMain" />
            <include refid="columnsForOther" />

        FROM <include refid="tableJoin" />
        WHERE
            <%
              pkFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  AND ")
                    }
                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    out.print( s )
                    out.println()
              }
            %>
    </select>


	<!-- insert -->
	<!-- 참고:
	    // TODO//complete : seq
		<selectKey keyProperty="${pkFieldsFirst.name}" resultType="int" order="BEFORE">
			SELECT SQ_${table.name}.NEXTVAL FROM DUAL
		</selectKey>
	-->
	<insert id="insert${className}" parameterType="${fullDTO}">

		INSERT INTO ${table.name} (
            <%
              fields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  ,")
                    }
                    out.print(it.dbName)
                    out.println()
              }
            %>
		) VALUES (
            <%
              fields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  ,")
                    }
                    def s = String.format( " #{ %s } ", it.name )
                    if( it.isDateType ) {
                        if( it.isInsertField || it.isUpdateField ) {
                            s = "SYSDATE"
                        } else {
                            s = String.format( " TO_DATE( #{ %s } ,'YYYYMMDDHH24MISS' )", it.name )
                        }
                    }
                    out.print( s )
                    out.println()
              }
            %>
		)
	</insert>

	<!-- update -->
	<update id="update${className}" parameterType="${fullDTO}">
		UPDATE ${table.name}
		SET
            <%
              nonPkNoInsertFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  ,")
                    }

                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    if( it.isDateType ) {
                        if( it.isUpdateField ) {
                            s = String.format( " %s = SYSDATE ", it.dbName)
                        } else {
                            s = String.format( " %s = TO_DATE( #{ %s } ,'YYYYMMDDHH24MISS' )", it.dbName, it.name  )
                        }
                    }
                    out.print( s )
                    out.println()
              }
            %>
		WHERE
            <%
              pkFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  AND ")
                    }
                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    out.print( s )
                    out.println()
              }
            %>
	</update>

	<!-- delete -->
	<delete id="delete${className}" parameterType="${fullDTO}">
		DELETE FROM ${table.name}
		WHERE
            <%
              pkFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  AND ")
                    }

                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    out.print( s )
                    out.println()
              }
            %>
	</delete>

    <!-- delete by pk -->
    <delete id="delete${className}ByPk" >
        DELETE FROM ${table.name}
        WHERE
            <%
              pkFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  AND ")
                    }

                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    out.print( s )
                    out.println()
              }
            %>
    </delete>

    <%
        if( parentTableObjectExist ) {
    %>
    <!-- delete by parent pk -->
    <delete id="delete${className}ByParentPk" >
        DELETE FROM ${table.name}
        WHERE
            <%
              parentTableObject.pkFields.eachWithIndex { it,index ->
                    if(index != 0) {
                        out.print("		  AND ")
                    }

                    def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                    out.print( s )
                    out.println()
              }
            %>
    </delete>
    <%
        }
    %>


	<!-- delete by update -->
	<!--
        <delete id="delete${className}ByUpdate" parameterType="${fullDTO}">
            UPDATE ${table.name}
            SET
                USE_YN = '0'
                , UPD_ID = #{updId}
                , UPD_IP = #{updIp}
                , UPD_DTM = SYSDATE
            WHERE
                <%
                  pkFields.eachWithIndex { it,index ->
                        if(index != 0) {
                            out.print("		  AND ")
                        }

                        def s = String.format( " %s = #{ %s } ", it.dbName, it.name )
                        out.print( s )
                        out.println()
                  }
                %>
        </delete>
	-->





</mapper>
