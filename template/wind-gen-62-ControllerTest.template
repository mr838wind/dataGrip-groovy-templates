package ${ITEMS.ControllerTest.packageName};


import com.shinsegae.villiv.backoffice.VillivBackofficeApplication;
import com.shinsegae.villiv.common.upload.dto.BASE64DecodedMultipartFile;
import com.shinsegae.villiv.common.upload.dto.UploadResultDTO;
import com.shinsegae.villiv.common.utils.JSONUtil;
import lombok.extern.slf4j.Slf4j;
import org.junit.Before;
import org.junit.Test;
import org.junit.jupiter.params.aggregator.ArgumentAccessException;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;

/**
 * <%= tableComment %> test
 */
@RunWith(SpringRunner.class)
@SpringBootTest(
        classes = {VillivBackofficeApplication.class}
        , webEnvironment = SpringBootTest.WebEnvironment.MOCK
)
@AutoConfigureMockMvc
@Slf4j
public class Test${className}Controller extends TestBaseMvc {

    public static final String API_PREFIX = API_TYPE_PREFIX + "/$classNameLower";

    @Autowired
    ${className}Service service;

    /** 최신 id */
    Integer latestId = 0;

//    @Before
//    public void setUp() {
//        latestId = (Integer) jdbcTemplate.queryForObject(" select max(BNER_ID) as id from ${table.name} ", Integer.class);
//    }

    @Test
    public void contextLoads() {

    }


    @Test
    public void list() throws Exception {
        MockHttpServletRequestBuilder requestBuilder = get(API_PREFIX + "/list")
                .contentType(MediaType.APPLICATION_JSON).characterEncoding("UTF-8");

        //== set value
        ${className}SearchCriteria search = new ${className}SearchCriteria();
        //search.setBzCd(BZ_CD);


        setRequestBuilderParam(requestBuilder, search);
        final ResultActions actions = mockMvc.perform(requestBuilder)
                .andDo(print());
        actions
                .andExpect(MockMvcResultMatchers.status().isOk())
//                .andExpect( jsonPath("\$.list").exists())
        ;
    }


    @Test
    public void detail() throws Exception {

        MockHttpServletRequestBuilder requestBuilder = get(API_PREFIX + "/detail")
                .contentType(MediaType.APPLICATION_JSON).characterEncoding("UTF-8");

        //== set value
        ${className}DTO search = new ${className}DTO();
        //search.setBzCd(BZ_CD);


        setRequestBuilderParam(requestBuilder, search);
        final ResultActions actions = mockMvc.perform(requestBuilder)
                .andDo(print());
        actions
                .andExpect(MockMvcResultMatchers.status().isOk())
//                .andExpect( jsonPath("\$.list").exists())
        ;
    }



    @Test
    public void insert() throws Exception {

//        //== image
//        UploadInfoDTO uploadInfoDTO = getUploadInfoDTO(imageOrange);

        ${className}DTO dto = ${className}DTO.builder()
                  //.bzCd(BZ_CD)
                  .build();


        final ResultActions actions = mockMvc.perform(post(API_PREFIX + "/insert")
                .contentType(MediaType.APPLICATION_JSON).characterEncoding("UTF-8")
                .content(JSONUtil.toJson(dto))
        )
                .andDo(print());

        actions
                .andExpect(MockMvcResultMatchers.status().isOk())
//                .andExpect( jsonPath("\$.list").exists())

        ;
    }


    @Test
    public void update() throws Exception {

//        //== image
//        UploadInfoDTO uploadInfoDTO = getUploadInfoDTO(imageOrange, true);


            ${className}DTO dto = new ${className}DTO();
//          ${className}DTO search = new ${className}DTO();
//          ${className}DTO dto = service.select${className}WithSub(search);


        final ResultActions actions = mockMvc.perform(post(API_PREFIX + "/update")
                .contentType(MediaType.APPLICATION_JSON).characterEncoding("UTF-8")
                .content(JSONUtil.toJson(dto))
        )
                .andDo(print());

        actions
                .andExpect(MockMvcResultMatchers.status().isOk())
//                .andExpect( jsonPath("\$.list").exists())

        ;
    }



    @Test
    public void delete() throws Exception {

        ${className}DTO dto = new ${className}DTO();
        //dto.setBzCd(BZ_CD);

        final ResultActions actions = mockMvc.perform(post(API_PREFIX + "/delete")
                .contentType(MediaType.APPLICATION_JSON).characterEncoding("UTF-8")
                .content(JSONUtil.toJson(dto))
        )
                .andDo(print());

        actions
                .andExpect(MockMvcResultMatchers.status().isOk())
//                .andExpect( jsonPath("\$.list").exists())

        ;
    }


}